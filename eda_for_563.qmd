---
title: "Project"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r echo = FALSE, message = FALSE, warning = FALSE}
library(tidyverse)
library(readxl)
library(writexl)
library(ggplot2)
```

## Read xlsx Files from 2018 to 2023

```{r echo = FALSE, message = FALSE, warning = FALSE}
# File path and names
file_names <- c("sqf-2018", "sqf-2019", "sqf-2020", "sqf-2021", "sqf-2022", "sqf-2023")

# Function to read and coerce all columns to character
standardize_dataset <- function(file_name) {
  year <- as.numeric(str_extract(file_name, "\\d{4}"))
  read_excel(paste0(file_name, ".xlsx")) |>
    set_names(~ toupper(gsub(" ", "_", .))) |> 
    mutate(across(everything(), as.character)) |> 
    mutate(FILE_YEAR = as.character(year))
}


# Read and combine data
sqf_combined <- file_names |>
  map(standardize_dataset) |>
  bind_rows()

sqf_combined_sorted <- sqf_combined %>%
  select(all_of(sort(names(sqf_combined))))

options(width = 100)
glimpse(sqf_combined_sorted) 
```

## Strange Null Values to NA

```{r echo = FALSE}
sqf_combined <- sqf_combined |>
  mutate(across(everything(), ~ na_if(., "(null)")))
```

## Numeric Columns

```{r echo = FALSE}
sqf_combined <- sqf_combined |>
  mutate(
    SUSPECT_HEIGHT = as.numeric(SUSPECT_HEIGHT),
    SUSPECT_WEIGHT = as.numeric(SUSPECT_WEIGHT),
    SUSPECT_REPORTED_AGE = as.numeric(SUSPECT_REPORTED_AGE),
    STOP_DURATION_MINUTES = as.numeric(STOP_DURATION_MINUTES),
    OBSERVED_DURATION_MINUTES = as.numeric(OBSERVED_DURATION_MINUTES),
    STOP_LOCATION_X = as.numeric(STOP_LOCATION_X),
    STOP_LOCATION_Y = as.numeric(STOP_LOCATION_Y)
    
  )
```

## Stop Frisk Time

```{r echo = FALSE}
sqf_combined |>
  filter(!str_detect(STOP_FRISK_TIME, 
                     "^\\d{2}:\\d{2}:\\d{2}$")) |>
  select(STOP_FRISK_TIME) |>
  distinct()

```

```{r echo = FALSE}
sqf_combined <- sqf_combined |>
  mutate(
    STOP_FRISK_TIME = if_else(
      str_detect(STOP_FRISK_TIME, 
                 "^1899-12-31 \\d{2}:\\d{2}:\\d{2}$"),
      str_extract(STOP_FRISK_TIME, 
                  "\\d{2}:\\d{2}:\\d{2}$"),
      NA_character_
    )
  )

```

```{r echo = FALSE}
sqf_combined <- sqf_combined |>
  mutate(
    STOP_FRISK_DATE = as.Date(STOP_FRISK_DATE, 
                              format = "%Y-%m-%d"),
    STOP_FRISK_TIME = hms::as_hms(STOP_FRISK_TIME)
  )
```

## Missingness

```{r echo = FALSE}
get_na_summary <- function(data) {
  data |>
    summarise(across(everything(), ~ sum(is.na(.)))) |>
    pivot_longer(cols = everything(), 
                 names_to = "Column", 
                 values_to = "NA_Count") |>
    arrange(desc(NA_Count)) |>
    print(n = Inf)
}
get_na_summary(sqf_combined)
```

## Flag Variables

```{r echo = FALSE}
# Step 1: Identify FLAG/FLG columns
flag_columns <- sqf_combined |>
  select(contains("FLAG"), contains("FLG")) |>
  colnames()

# Glimpse unique values in FLAG/FLG columns
sqf_combined |>
  select(all_of(flag_columns)) |>
  summarise(across(everything(), ~ list(unique(.)))) |>
  pivot_longer(everything(), names_to = "Column", values_to = "Unique_Values") |>
  mutate(Unique_Values = map_chr(Unique_Values, ~ paste(.x, collapse = ", "))) |>
  print(n = Inf)

```

### Impute NA to N in FLAG Columns

-   Only "Y" and NA present: Replace NA with "N"

-   "Y", NA, and "(" present: Replace "(" with NA, and NA with "N"

-   "Y", "N", NA, and "(" present: Replace "(" with NA

```{r echo = FALSE}
process_flag_column <- function(column) {
  unique_vals <- unique(column)
  
  if (all(unique_vals %in% c("Y", NA))) {
    return(if_else(is.na(column), "N", column))
  } else if (all(unique_vals %in% c("Y", NA, "("))) {
    column <- if_else(is.na(column), "N", column)  # First replace NA with "N"
    return(if_else(column == "(", NA_character_, column))  # Then replace "(" with NA
  } else if (all(unique_vals %in% c("Y", "N", NA, "("))) {
    return(if_else(column == "(", NA_character_, column))
  } else {
    return(column)
  }
}

sqf_combined <- sqf_combined |>
  mutate(across(all_of(flag_columns), process_flag_column))

sqf_combined |>
  select(all_of(flag_columns)) |>
  summarise(across(everything(), ~ list(unique(.)))) |>
  pivot_longer(everything(), names_to = "Column", values_to = "Unique_Values") |>
  mutate(Unique_Values = map_chr(Unique_Values, ~ paste(.x, collapse = ", "))) |>
  print(n = Inf)
```

## Missingness

```{r echo = FALSE}
na_summary <- get_na_summary(sqf_combined)
na_summary
```

## Working Dataset

### Drop Columns with High Missingness

```{r echo = FALSE}

# filter columns with high missingness 
useful_cols <- na_summary |>
  filter(NA_Count < 10000) |>
  select(Column) 

# use useful_cols to filter columns and remove NA
working_dataset <- sqf_combined |>
  select(all_of(useful_cols$Column)) |>
  drop_na()

glimpse(working_dataset)
```

## Type Conversions for remaining predictors

```{r echo = FALSE}
# Define columns to exclude
excluded_columns <- c(
  "STOP_LOCATION_FULL_ADDRESS", 
  "DEMEANOR_OF_PERSON_STOPPED", 
  "STOP_FRISK_DATE", 
  "YEAR2", 
  "MONTH2", 
  "DAY2", 
  "FILE_YEAR",
  "STOP_LOCATION_X",
  "STOP_LOCATION_Y"
)

# Drop excluded columns
working_dataset <- working_dataset %>%
  select(-all_of(excluded_columns))

# Identify character columns to convert to factors
factor_columns <- working_dataset %>%
  select(where(is.character)) %>%
  colnames()

# Convert character columns to factors and ensure SUSPECT_RACE_DESCRIPTION stays a factor
working_dataset <- working_dataset %>%
  mutate(across(all_of(factor_columns), ~ factor(make.names(as.character(.))))) %>%
  mutate(SUSPECT_RACE_DESCRIPTION = factor(make.names(as.character(SUSPECT_RACE_DESCRIPTION))))

# Verify structure
str(working_dataset)

```

## Check unique values in factor columns

```{r echo = FALSE}
columns_of_interest <- c("SUSPECT_EYE_COLOR", 
                         "SUSPECT_HAIR_COLOR", 
                         "SUSPECT_BODY_BUILD_TYPE", 
                         "SUSPECTED_CRIME_DESCRIPTION",
                         "STOP_LOCATION_PATROL_BORO_NAME",
                         "STOP_LOCATION_BORO_NAME")

# Map `unique` to each column and store the result
unique_values <- map(columns_of_interest, ~ unique(working_dataset[[.x]]))

# Name the results for clarity
names(unique_values) <- columns_of_interest

unique_values

```

## Clean SUSPECT_HAIR_COLOR with "(nu" to NA

Also drop any unused levels that are present

```{r}

sum(working_dataset$SUSPECT_HAIR_COLOR == "(nu", na.rm = TRUE)

working_dataset$SUSPECT_HAIR_COLOR[working_dataset$SUSPECT_HAIR_COLOR == "(nu"] <- NA

# Remove rows with NA values in the SUSPECT_HAIR_COLOR column
working_dataset <- working_dataset[!is.na(working_dataset$SUSPECT_HAIR_COLOR), ]

working_dataset <- droplevels(working_dataset)

str(working_dataset)
```

# Look at level counts

```{r}
factor_levels <- sapply(data, function(x) if (is.factor(x)) nlevels(x) else NA)

# Display results
factor_info <- data.frame(
  Predictor = names(factor_levels),
  Levels = factor_levels
)

# Show predictors that are factors with their number of levels
factor_info <- factor_info[!is.na(factor_info$Levels), ]
print(factor_info)
```

# Drop RECORD_STATUS_CODE

```{r}
working_dataset <- working_dataset %>%
  select(-RECORD_STATUS_CODE)
```

# Response Variable

```{r}
table(working_dataset$SUSPECT_RACE_DESCRIPTION)

working_dataset <- working_dataset %>%
  # Convert to character to avoid factor level issues
  mutate(SUSPECT_RACE_DESCRIPTION = as.character(SUSPECT_RACE_DESCRIPTION)) %>%
  
  # Consolidate levels using case_when
  mutate(SUSPECT_RACE_DESCRIPTION = case_when(
    SUSPECT_RACE_DESCRIPTION %in% c("AMERICAN.INDIAN.ALASKAN.N", "AMERICAN.INDIAN.ALASKAN.NATIVE") ~ "Other",
    SUSPECT_RACE_DESCRIPTION %in% c("MIDDLE.EASTERN.SOUTHWEST", "MIDDLE.EASTERN.SOUTHWEST.ASIAN") ~ "Other",
    SUSPECT_RACE_DESCRIPTION == "ASIAN...PACIFIC.ISLANDER" ~ "Asian",
    SUSPECT_RACE_DESCRIPTION %in% c("BLACK.HISPANIC", "WHITE.HISPANIC") ~ "Hispanic",
    TRUE ~ SUSPECT_RACE_DESCRIPTION
  )) %>%
  
  # Convert back to factor to remove unused levels
  mutate(SUSPECT_RACE_DESCRIPTION = factor(SUSPECT_RACE_DESCRIPTION, levels = unique(SUSPECT_RACE_DESCRIPTION)))

# Verify the result
table(working_dataset$SUSPECT_RACE_DESCRIPTION)

```


# Save dataset

```{r}
write_xlsx(working_dataset, 'working_dataset.xlsx')

saveRDS(working_dataset, "working_dataset.rds")
```

## Different Variables on Race

```{r}
# Suspected crime vs. race
ggplot(working_dataset, aes(x = SUSPECTED_CRIME_DESCRIPTION,
                            fill = SUSPECT_RACE_DESCRIPTION)) + 
  geom_bar() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 
```

```{r}
# Suspected Arrested Flag vs. Race
ggplot(working_dataset, aes(x = SUSPECT_ARRESTED_FLAG,
                            fill = SUSPECT_RACE_DESCRIPTION)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 90, 
                                     vjust = 0.5, hjust=1)) 
```

